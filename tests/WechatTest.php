<?php

use Overtrue\Wechat\Wechat;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-05 at 18:08:24.
 */
class OvertrueWechatWechatTest extends TestCase
{
    /**
     * @var Wechat
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        $options = array(
            'app_id'            => 'sample_app_id',
            'secret'            => 'f1c242f4f2735d4687abb469072a298f',
            'token'             => 'test',
            // 'encodingAESKey' => 'eEqqLFPwRhf6FkIQpwraE3QDa6U3OpIQ5zYBRi0Zkcl' // optional
        );

        $this->object = \Mockery::mock('Overtrue\Wechat\Wechat[request]', array($options));

        $this->object->shouldReceive('request')->andReturn(array('key' => 'value'));
    }

    /**
     * @covers Overtrue\Wechat\Wechat::on
     * @todo   Implement testOn().
     */
    public function testOn()
    {
        $callback1 = function(){
            return 'callback1';
        };

        $callback2 = function(){
            return 'callback2';
        };

        $callback3 = function(){
            return 'callback3';
        };

        $callback4 = function(){
            return 'callback4';
        };

        $this->object->on('event', $callback1);
        $this->object->on('event', 'some_type', $callback2);
        $this->object->on('message', $callback3);
        $this->object->on('message', 'text', $callback4);

        $eventListeners   = $this->object->getListeners('event');
        $messageListeners = $this->object->getListeners('message');

        $this->assertContains($callback1, $eventListeners['*']);
        $this->assertContains($callback2, $eventListeners['some_type']);
        $this->assertContains($callback3, $messageListeners['*']);
        $this->assertContains($callback4, $messageListeners['text']);
    }

    /**
     * @covers Overtrue\Wechat\Wechat::event
     * @todo   Implement testEvent().
     */
    public function testEvent()
    {
        $callback1 = function(){
            return 'callback1';
        };

        $callback2 = function(){
            return 'callback2';
        };

        $this->object->on('event', $callback1);
        $this->object->on('event', 'subscribe', $callback2);

        $eventListeners   = $this->object->getListeners('event');

        $this->assertContains($callback1, $eventListeners['*']);
        $this->assertContains($callback2, $eventListeners['subscribe']);
    }

    /**
     * @covers Overtrue\Wechat\Wechat::message
     * @todo   Implement testMessage().
     */
    public function testMessage()
    {
        $callback1 = function(){
            return 'callback1';
        };

        $callback2 = function(){
            return 'callback2';
        };

        $this->object->on('message', $callback1);
        $this->object->on('message', 'image', $callback2);

        $messageListeners   = $this->object->getListeners('message');

        $this->assertContains($callback1, $messageListeners['*']);
        $this->assertContains($callback2, $messageListeners['image']);
    }

    /**
     * @covers Overtrue\Wechat\Wechat::serve
     * @todo   Implement testServe().
     */
    public function testServe()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Overtrue\Wechat\Wechat::error
     * @todo   Implement testError().
     */
    public function testError()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Overtrue\Wechat\Wechat::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Overtrue\Wechat\Wechat::autoRequestToken
     * @todo   Implement testAutoRequestToken().
     */
    public function testAutoRequestToken()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Overtrue\Wechat\Wechat::makeUrl
     * @todo   Implement testMakeUrl().
     */
    public function testMakeUrl()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Overtrue\Wechat\Wechat::request
     */
    public function testRequestBadMethod()
    {
        $this->object->request('hello', '');
    }

    /**
     * @covers Overtrue\Wechat\Wechat::request
     */
    public function testRequest()
    {
        $this->object->request('GET', '');
    }

    /**
     * @covers Overtrue\Wechat\Wechat::__call
     * @todo   Implement test__call().
     */
    public function test__call()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Overtrue\Wechat\Wechat::__get
     * @todo   Implement test__get().
     */
    public function test__get()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Overtrue\Wechat\Wechat::__sleep
     * @todo   Implement test__sleep().
     */
    public function test__sleep()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
